#' @title Geneset class
#' @description An object to represent signatures.
#' @slot genelist A list of drug signatures and functional \code{pathways} (if
#' specified) with up and/or down-regulated genes.
#' @slot n.genes Argument passed to \code{\link[beyondcell]{GenerateGenesets}}.
#' Number of up and/or down-regulated genes per signature.
#' @slot mode Argument passed to \code{GenerateGenesets}. Whether the
#' \code{geneset} contains up and/or down-regulated genes.
#' @slot info Dataframe with drug signatures information, including sig IDs,
#' drug names, MoAs, target genes and data sources (LINCS, CTRP, GDSC or CCLE).
#' This slot is only filled if \code{GenerateGenesets}' input is a pre-loaded
#' matrix.
#' @slot comparison Argument passed to \code{GenerateGenesets}. Either
#' \code{"treated_vs_control"} or \code{"control_vs_treated"}.
geneset <- setClass("geneset", slots = list(genelist = "list",
n.genes = "numeric",
mode = "character",
info = "data.frame",
comparison = "character"))
#' @title Beyondcell class
#' @description An object to represent the beyondcell scores (BCS) for each cell and
#' signature.
#' @slot scaled (Subsetted and/or regressed) scaled BCS.
#' @slot normalized (Subsetted and/or regressed) normalized BCS.
#' @slot data Original normalized BCS, without subsetting or regression.
#' @slot switch.point (Subsetted and/or regressed) scaled BCS for which the
#' normalized score in \code{@@data} is 0 (one switch point per signature).
#' @slot ranks List of dataframes with the BCS' statistics and ranks returned
#' by \code{\link[beyondcell]{bcRanks}}.
#' @slot expr.matrix Single-cell expression matrix used to compute the BCS.
#' @slot meta.data Dataframe that contains information about each cell
#' (including the therapeutic clusters and \code{\link[Seurat]{Seurat}}'s
#' \code{@@meta.data}).
#' @slot SeuratInfo List with information about the input \code{Seurat} object,
#' including the \code{@@reductions}.
#' @slot background (Subsetted and/or regressed) normalized BCS obtained using
#' DSS signatures. Useful to compute \code{beyondcell}'s UMAP reduction and the
#' therapeutic clusters when the number of drug signatures is low.
#' @slot reductions A list of dimensional reductions for this object.
#' @slot regression A list with the order of subset and regression steps
#' performed on the \code{beyondcell} object and the variables used for
#' regression.
#' @slot n.genes Argument passed to \code{\link[beyondcell]{GenerateGenesets}}.
#' Number of up and/or down-regulated genes per signature.
#' @slot mode Argument passed to \code{GenerateGenesets}. Whether the
#' \code{geneset} contains up and/or down-regulated genes.
#' @slot thres Argument \code{expr.thres} passed to
#' \code{\link[beyondcell]{bcScore}}. Minimum fraction of signature genes that
#' must be expressed in a cell to compute its BCS.
beyondcell <- setClass("beyondcell",
slots = list(scaled = "matrix", normalized = "matrix",
data = "matrix", switch.point = "numeric",
ranks = "list", expr.matrix = "matrix",
meta.data = "data.frame", SeuratInfo = "list",
background = "matrix", reductions = "list",
regression = "list", n.genes = "numeric",
mode = "character", thres = "numeric"))
library('oligo')
library('preprocessCore')
raw_data_dir <- '/raid/sagarcia/drug_signatures'
sdrf_location <- file.path(raw_data_dir, "E-MTAB-3610.sdrf.txt")
SDRF          <- read.delim(sdrf_location)
rownames(SDRF) <- SDRF$Array.Data.File
SDRF           <- AnnotatedDataFrame(SDRF)
raw_exprset <- oligo::read.celfiles(filenames = file.path(raw_data_dir,
SDRF$Array.Data.File),
verbose = FALSE, phenoData = SDRF)
## test outliers
test_eset <- oligo::rma(raw_exprset, normalize = FALSE)
rm(test_eset)
## test outliers
norm_eset <- oligo::rma(raw_exprset, normalize = TRUE)
library('DEGAS')
library('devtools')
library('ggpubr')
library('ggplot2')
library('patchwork')
library('scales')
library('svglite')
library('tidyverse')
## Instalar paquete: feather color palette
#devtools::install_github(repo = "shandiya/feathers", ref = "main")
library('feathers')
## Preparar el directorio de trabajo
setwd('~/Documents/lessons_and_pupils/rocio_bach/estadisticas/clean/')
## Cargar tema por defecto
source('../src/bw_no_axes.R')
tuber <- read.csv(file = 'tuberculosis_ap.tsv', sep='\t')
# Convertir los años en fechas
tuber$Year      <- as.Date(ISOdate(tuber$Year, 12, 31))
## Distribución tuberculosis
tuber_dist <- ggplot(data = tuber) +
geom_line(aes(x=Year, y=Mortality), color="#cf2236", size=2, alpha=0.4) +
geom_area(aes(x=Year, y=Mortality), fill="#d683ad", alpha = 0.5, position = 'identity') +
geom_text(x=as.Date('1918-12-31'), y=35000, label='Gripe de 1918') +
geom_text(x=as.Date('1944-12-31'), y=20000, label='Posguerra Civil') +
geom_text(x=as.Date('1963-12-31'), y=25000, label='Descubrimiento de la isoniacida') +
geom_segment(aes(x = as.Date('1956-12-31'), y = 24000,
xend = as.Date('1952-12-31'), yend = 20000),
arrow = arrow(length = unit(0.5, "cm"))) +
scale_x_date(date_labels = "%Y", date_breaks="5 years", expand = c(0,0)) +
scale_y_continuous(breaks = seq(0,40000, 5000),
labels = unit_format(scale = 1e-3, prefix=''),
expand = c(0,0)) +
expand_limits(y=40000) +
labs(x= '', y='Miles de casos') +
ggtitle(label='Mortalidad total por tuberculosis respiratoria') +
bw_no_axes()
tuber_by_factor <- tuber %>%
mutate(timepoint = case_when(
Year <= as.Date('1944-12-31') ~ 'before_antibiotics',
Year >= as.Date('1944-12-31') & Year <= as.Date('1952-12-31') ~ 'before_isoniacide',
Year >= as.Date('1952-12-31') ~ 'after_isoniacide'
)) %>%
mutate(timepoint = as.factor(timepoint)) %>%
group_by(timepoint) %>%
mutate(median_mortality=median(Mortality, na.rm=TRUE))
tuber_by_factor$timepoint <- fct_reorder(tuber_by_factor$timepoint, -tuber_by_factor$median_mortality)
## Plot hist expression / group
set.seed(1994)
comparisons_to_perform <- list( c("before_antibiotics", "after_isoniacide"), c("before_isoniacide", "after_isoniacide"), c("before_antibiotics", "before_isoniacide") )
event_mortality <- ggplot(tuber_by_factor, aes(x=timepoint, y=Mortality, fill=timepoint)) +
geom_boxplot() +
stat_compare_means(comparisons = comparisons_to_perform,
method='wilcox.test',
label="p.signif",
ref.group = 'before_antibiotics') +
stat_compare_means(method = 'kruskal.test', label.x = 2.5, label.y=45000) +
scale_y_continuous(breaks = seq(0,50000, 5000),
labels = unit_format(scale = 1e-3, prefix='')) +
scale_x_discrete(labels=NULL) +
scale_fill_manual(labels=c('Anterior a la penicilina', 'Posterior a penicilina', 'Posterior a isoniacida'),
values=get_pal("yellow_robin")) +
bw_no_axes() +
theme(axis.ticks.x=element_blank()) +
labs(x='', y='Miles de muertos', fill='Periodo') +
ggtitle('Impacto de la isoniacida en la mortalidad total')
event_mortality <- ggplot(tuber_by_factor, aes(x=timepoint, y=Mortality, fill=timepoint)) +
geom_boxplot() +
stat_compare_means(comparisons = comparisons_to_perform,
method='wilcox.test',
label="p.signif",
ref.group = 'before_antibiotics') +
stat_compare_means(method = 'kruskal.test', label.x = 2.5, label.y=45000) +
scale_y_continuous(breaks = seq(0,50000, 5000),
labels = unit_format(scale = 1e-3, prefix='')) +
scale_x_discrete(labels=NULL) +
scale_fill_manual(labels=c('Anterior a la penicilina', 'Posterior a penicilina', 'Posterior a isoniacida'),
values=get_pal("yellow_robin")) +
bw_no_axes() +
theme(axis.ticks.x=element_blank()) +
labs(x='', y='Miles de muertos', fill='Periodo') +
ggtitle('Impacto de la isoniacida en la mortalidad total')
event_mortality
